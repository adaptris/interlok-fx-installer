import org.apache.tools.ant.filters.*

plugins {
    // Apply the java-library plugin to add support for Java Library
    id "application"
    id "java-library"
    id "jacoco"
    id "maven-publish"
    id "org.openjfx.javafxplugin" version "0.0.8"
}

ext {
  interlokCoreVersion = project.hasProperty("interlokCoreVersion") ? project.getProperty("interlokCoreVersion") : "3.10-SNAPSHOT"
  releaseVersion = project.hasProperty("releaseVersion") ? project.getProperty("releaseVersion") : "3.10-SNAPSHOT"
  nexusBaseUrl = project.hasProperty("nexusBaseUrl") ? project.getProperty("nexusBaseUrl") : "https://nexus.adaptris.net/nexus"
  mavenPublishUrl = project.hasProperty("mavenPublishUrl") ? project.getProperty("mavenPublishUrl") : nexusBaseUrl + "/content/repositories/snapshots"
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty("repoUsername") ? project.getProperty("repoUsername") : "unknown"
  repoPassword = project.hasProperty("repoPassword") ? project.getProperty("repoPassword") : "unknown"
  defaultNexusRepo = project.hasProperty("defaultNexusRepo") ? project.getProperty("defaultNexusRepo") : "https://repo1.maven.org/maven2/"
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokJavadocs= project.hasProperty("interlokJavadocs") ? project.getProperty("interlokJavadocs") : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty("interlokCommonJavadocs") ? project.getProperty("interlokCommonJavadocs") : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName="Interlok Installer Java FX"
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
}

repositories {
  mavenCentral()
  maven { url "$defaultNexusRepo" }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
  maven { url "https://repo.gradle.org/gradle/libs-releases-local/" } // Required for JavaFx dependencies
}

dependencies {
  implementation "org.gradle:gradle-tooling-api:6.1.1"

  // Use JUnit test framework
  testImplementation "junit:junit:4.13"
}

group   = 'com.adaptris'
version = releaseVersion

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

processResources {
     filesMatching("**/*.properties") {
	    filter ReplaceTokens, tokens: [
	        "release.version": project.property("releaseVersion")
	    ]
     }
}

jar {
  manifest {
    attributes "Main-Class": "com.adaptris.fxinstaller.Launcher"
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

javafx {
    version = "11.0.2"
    modules = [ "javafx.controls", "javafx.fxml" ]
}

mainClassName = "com.adaptris.fxinstaller.Launcher"

jacoco {
  toolVersion="0.8.3"
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
}

test {
  include "com/adaptris/**/*Test*.class"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", "Interlok JavaFX Installer")
        asNode().appendNode("description", "Interlok installer built using JavaFX")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.10.0+")
        properties.appendNode("license", "false")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-fx-installer/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-fx-installer")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

check.dependsOn jacocoTestReport
